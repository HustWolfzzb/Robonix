from robonix.uapi.specs.types import EntityPath
from robonix.uapi.runtime.action import action, EOS_TYPE_ActionResult, get_runtime, action_print


@action
def debug_test_action(a: EntityPath) -> EOS_TYPE_ActionResult:
    runtime = get_runtime()
    A = runtime.get_graph().get_entity_by_path(a)
    result = A.skl_debug_test_skill(input_val=1)
    action_print(f"debug test action result: {result}")
    return EOS_TYPE_ActionResult.SUCCESS

@action
def move_and_capture_action(a: EntityPath, b: EntityPath) -> EOS_TYPE_ActionResult:
    runtime = get_runtime()
    A = runtime.get_graph().get_entity_by_path(a)
    B = runtime.get_graph().get_entity_by_path(b)

    if A is None:
        action_print(f"entity A not found at path: {a}")
        return EOS_TYPE_ActionResult.FAILURE
    if B is None:
        action_print(f"entity B not found at path: {b}")
        return EOS_TYPE_ActionResult.FAILURE

    # Get robot pose before movement
    # action_print("getting initial robot pose...")
    # initial_pose = A.cap_space_getpos()
    # if initial_pose is None:
    #     action_print("failed to get initial robot pose")
    #     return EOS_TYPE_ActionResult.FAILURE
    # action_print(f"initial pose: {initial_pose}")

    # Capture initial images
    action_print("capturing initial images...")
    A.cap_save_rgb_image(
        filename="./examples/demo1/initial_rgb.jpg",
        camera_name="robot_camera",
        width=640,
        height=480,
    )
    A.cap_save_depth_image(
        filename="./examples/demo1/initial_depth.npy",
        camera_name="robot_camera",
        width=640,
        height=480,
    )

    # Move to target
    b_pos = B.cap_space_getpos()
    action_print(f"moving to position: {b_pos}")
    result = A.cap_space_move(x=b_pos["x"], y=b_pos["y"], z=b_pos["z"])
    if not result["success"]:
        action_print(f"move failed: {result}")
        return EOS_TYPE_ActionResult.FAILURE

    # Get robot pose after movement
    # action_print("getting final robot pose...")
    # final_pose = A.cap_space_getpos()
    # if final_pose is None:
    #     action_print("failed to get final robot pose")
    #     return EOS_TYPE_ActionResult.FAILURE
    # action_print(f"final pose: {final_pose}")

    # Capture final images
    action_print("capturing final images...")
    A.cap_save_rgb_image(
        filename="./examples/demo1/final_rgb.jpg",
        camera_name="robot_camera",
        width=640,
        height=480,
    )
    A.cap_save_depth_image(
        filename="./examples/demo1/final_depth.npy",
        camera_name="robot_camera",
        width=640,
        height=480,
    )

    action_print("move and capture action completed successfully!")
    return EOS_TYPE_ActionResult.SUCCESS